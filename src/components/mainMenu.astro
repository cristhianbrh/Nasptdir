---
interface VolumeInfo {
  title: string;
  publisher: string;
  publishedDate: string;
  description: string;
  industryIdentifiers: {
    type: string;
    identifier: string;
  }[];
  readingModes: {
    text: boolean;
    image: boolean;
  };
  pageCount: number;
  printType: string;
  categories: string[];
  maturityRating: string;
  allowAnonLogging: boolean;
  contentVersion: string;
  panelizationSummary: {
    containsEpubBubbles: boolean;
    containsImageBubbles: boolean;
  };
  imageLinks: {
    smallThumbnail: string;
    thumbnail: string;
  };
  language: string;
  previewLink: string;
  infoLink: string;
  canonicalVolumeLink: string;
}

interface ListPrice {
  amount: number;
  currencyCode: string;
}

interface SaleInfo {
  country: string;
  saleability: string;
  isEbook: boolean;
  listPrice: ListPrice;
  retailPrice: ListPrice;
  buyLink: string;
  offers: any[]; // Aquí puedes definir una interfaz más específica si conoces la estructura de los datos
}

interface EpubPdfInfo {
  isAvailable: boolean;
  acsTokenLink: string;
}

interface AccessInfo {
  country: string;
  viewability: string;
  embeddable: boolean;
  publicDomain: boolean;
  textToSpeechPermission: string;
  epub: EpubPdfInfo;
  pdf: EpubPdfInfo;
  webReaderLink: string;
  accessViewStatus: string;
  quoteSharingAllowed: boolean;
}

interface SearchInfo {
  textSnippet: string;
}

interface BookVolume {
  kind: string;
  id: string;
  etag: string;
  selfLink: string;
  volumeInfo: VolumeInfo;
  saleInfo: SaleInfo;
  accessInfo: AccessInfo;
  searchInfo: SearchInfo;
}


const getAllApi = async () => {
    const rpta = await fetch("https://www.googleapis.com/books/v1/volumes?q=*")
        .then((ev) => ev.json())
        .then((ev) => ev);
    return rpta;
};

const books = await getAllApi();
---

<div class="flex-1 bg-red-100">
    {
        books?.items.map(((book: BookVolume) => {
            console.log(book)
            return <p>{book?.volumeInfo.title}</p>
        }))
    }
</div>
